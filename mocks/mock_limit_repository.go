// Code generated by MockGen. DO NOT EDIT.
// Source: repository/limit.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "alif-sigmatech/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLimitRepository is a mock of LimitRepository interface.
type MockLimitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLimitRepositoryMockRecorder
}

// MockLimitRepositoryMockRecorder is the mock recorder for MockLimitRepository.
type MockLimitRepositoryMockRecorder struct {
	mock *MockLimitRepository
}

// NewMockLimitRepository creates a new mock instance.
func NewMockLimitRepository(ctrl *gomock.Controller) *MockLimitRepository {
	mock := &MockLimitRepository{ctrl: ctrl}
	mock.recorder = &MockLimitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimitRepository) EXPECT() *MockLimitRepositoryMockRecorder {
	return m.recorder
}

// CreateLimit mocks base method.
func (m *MockLimitRepository) CreateLimit(limit *model.Limit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLimit", limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLimit indicates an expected call of CreateLimit.
func (mr *MockLimitRepositoryMockRecorder) CreateLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLimit", reflect.TypeOf((*MockLimitRepository)(nil).CreateLimit), limit)
}

// GetLimitByCustomerID mocks base method.
func (m *MockLimitRepository) GetLimitByCustomerID(customerID int) (*model.Limit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimitByCustomerID", customerID)
	ret0, _ := ret[0].(*model.Limit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimitByCustomerID indicates an expected call of GetLimitByCustomerID.
func (mr *MockLimitRepositoryMockRecorder) GetLimitByCustomerID(customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimitByCustomerID", reflect.TypeOf((*MockLimitRepository)(nil).GetLimitByCustomerID), customerID)
}
