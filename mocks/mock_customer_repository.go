// Code generated by MockGen. DO NOT EDIT.
// Source: repository/customer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "alif-sigmatech/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// GetCustomerByID mocks base method.
func (m *MockCustomerRepository) GetCustomerByID(id int) (*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByID", id)
	ret0, _ := ret[0].(*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByID indicates an expected call of GetCustomerByID.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomerByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByID", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomerByID), id)
}

// GetCustomerByNIK mocks base method.
func (m *MockCustomerRepository) GetCustomerByNIK(nik string) (*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByNIK", nik)
	ret0, _ := ret[0].(*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByNIK indicates an expected call of GetCustomerByNIK.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomerByNIK(nik interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByNIK", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomerByNIK), nik)
}

// RegisterCustomer mocks base method.
func (m *MockCustomerRepository) RegisterCustomer(customer *model.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCustomer", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCustomer indicates an expected call of RegisterCustomer.
func (mr *MockCustomerRepositoryMockRecorder) RegisterCustomer(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCustomer", reflect.TypeOf((*MockCustomerRepository)(nil).RegisterCustomer), customer)
}
